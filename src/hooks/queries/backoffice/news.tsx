import {
  UseMutationOptions,
  UseQueryOptions,
  useMutation,
  useQuery,
} from "@tanstack/react-query";
import axios from "@/libs/axios";
import { AxiosRequestConfig } from "axios";

const ENDPOINT = "/backoffice/news";

export type News = {
  news_title: string;
  news_link: string;
  news_image_link: string;
  news_impact: string;
  news_source: string;
  news_source_link: string;
  news_time_ago: string;
  news_preview: string;
  news_type: string;
  news_category: string;
  news_ticker: string;
  news_date: Date | string;
  is_active?: boolean;
  CreatedBy?: string;
  CreatedAt?: string;
  ModifiedBy?: string;
  ModifiedAt?: string;
};

export type NewsResponse<T extends Record<string, string> | undefined> = {
  data: T extends undefined ? News[] : News;
  message: string;
};

type Options<T extends Record<string, string> | undefined> = Partial<
  UseQueryOptions<NewsResponse<T>, Error>
> & {
  params?: T;
};

// https://arctfrex.apidog.io/api-11083918
export const useGetNews = <T extends Record<string, string> | undefined>({
  params,
  ...options
}: Options<T>) => {
  return useQuery({
    ...options,
    queryKey: ["news" + new URLSearchParams(params).toString()],
    queryFn: async () => {
      const { data } = await axios.get<NewsResponse<T>>(ENDPOINT, { params });

      return data;
    },
  });
};

export interface CreateNewsRequest extends News {}

// Generated by https://quicktype.io
export interface CreateNewsResponse {
  message: string;
  data: News;
  time: string;
}

// https://arctfrex.apidog.io/api-11038694
export const useCreateNewsMutation = (
  options: UseMutationOptions<CreateNewsResponse, Error, CreateNewsRequest>
) => {
  return useMutation({
    mutationFn: async (payload) => {
      const { data } = await axios.post<CreateNewsResponse>(ENDPOINT, payload);

      return data;
    },
    ...options,
  });
};

type UseUpdateNewsMutationVariables = {
  payload: CreateNewsRequest;
  config?: AxiosRequestConfig<any>;
};

type UseUpdateNewsMutationOptions = UseMutationOptions<
  CreateNewsResponse,
  Error,
  UseUpdateNewsMutationVariables
>;

export const useUpdateNewsMutation = (
  options: UseUpdateNewsMutationOptions
) => {
  return useMutation({
    mutationFn: async ({ payload, config }: UseUpdateNewsMutationVariables) => {
      const { data } = await axios.patch<CreateNewsResponse>(
        ENDPOINT,
        payload,
        config
      );

      return data;
    },
    ...options,
  });
};

export const useDeactiveNewsMutation = (
  options: UseMutationOptions<any, Error, Record<string, string>>
) => {
  return useMutation({
    mutationFn: async (params) => {
      const { data } = await axios.delete<any>(ENDPOINT, {
        params,
      });

      return data;
    },
    ...options,
  });
};
